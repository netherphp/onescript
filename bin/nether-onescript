<?php

ini_set('display_errors',true);
require(sprintf(
	'%s/autoload.php',
	dirname(dirname(dirname(dirname(__FILE__))))
));

$cli = new Nether\Console\Client;

////////
////////

$cli->SetHandler('help',function(){
	$this::Messages(
		'Nether OneScript Tool',
		str_repeat('=',75),
		'',
		'>> build <path-to-json-file>',
		'   run the build process for the specified project. if you specify a directory instead of the project JSON file, it will automatically attempt onescript.json.',
		'',
		'   --copy=dir (default: none)',
		'     [optional] copy the entire project directory (sans .git) to the specified directory. most of the time however --deploy should be preferred over --copy.',
		'',
		'   --deploy=dir (default: none)',
		'     [optional] after building the final distribution will be copied to the specified directory (so, only the dist dir contents).',
		'',
		'>> create <path-to-dir>',
		'   create a new project in the specified directory.',
		'',
		'   --filename=filename (default: onescript.json)',
		'     [optional] name of the project file to create.',
		'',
		'   --outfile=filename (default: onescript.js)',
		'     [optional] name of the compiled file to create.',
		'',
		'   --minfile=filename (default: onescript.min.js)',
		'     [optional] name of the compiled minified file to create.',
		'',
		'   --files=list,of,files (default: empty)',
		'     [optional] comma list of files to include as the main files',
		'',
		'   --dirs=list,of,directories (default: libs)',
		'     [optional] comma list of directories to search for modules',
		'',
		'   --extensions=list,of,file,exts (default: js)',
		'     [optional] comma list of extensions to filter modules by.',
		'',
		'>> update <path-to-json-file>',
		'   open a project and resave it, useful for throwing in any default options missing from it.',
		''
	);

	return 0;
});

////////////////////////////////
////////////////////////////////

$cli->SetHandler('build',function(){

	$ds = DIRECTORY_SEPARATOR;
	$file = $this->GetInput(2);
	if(is_dir($file)) $file .= "{$ds}onescript.json";

	$deploy = $this->GetOption('deploy');
	$copy = $this->GetOption('copy');

	foreach([$deploy,$copy] as $cpdir) {
		if(!$cpdir) continue;

		$this::Message(">> preparing {$cpdir}...");

		if(is_file($cpdir)) {
			$this::Message("ERROR: specified deploy dir is currently a file.");
			return 1;
		}

		if(is_dir($cpdir) && !is_writable($cpdir)) {
			$this::Message("ERROR: unable to write to deploy dir");
			return 2;
		}

		if(!file_exists($cpdir)) {
			if(!Nether\OneScript\Project::MakeDirectory($cpdir)) {
				$this::Message("ERROR: unable to create deploy dir");
				return 3;
			}
		}
	} unset($cpdir);

	$this::Message(">> opening {$file}...");
	try { $project = Nether\OneScript\Project::FromFile($file); }
	catch(Exception $e) {
		$this::Message("ERROR: {$e->getMessge()}");
		return $e->getCode()+100;
	}

	$this::Message(">> building {$project->OutputFile}...");
	try { $project->Build(); }
	catch(Exception $e) {
		$this::Message("ERROR: {$e->getMessage()}");
		return $e->getCode()+100;
	}

	if($deploy) {
		$this::Message(">> deploying to {$deploy}...");
		try { $project->Deploy($deploy); }
		catch(Exception $e) {
			$this::Message("ERROR: {$e->getMessge()}");
			return $e->getCode()+100;
		}
	}

	if($copy) {
		$this::Message(">> copying to {$copy}...");
		try { $project->Copy($copy); }
		catch(Exception $e) {
			$this::Message("ERROR: {$e->getMessge()}");
			return $e->getCode()+100;
		}
	}

	return 0;
});

////////////////////////////////
////////////////////////////////

$cli->SetHandler('create',function(){

	$dir = $this->GetInput(2);
	$filename = ($this->GetOption('filename'))?:('onescript.json');
	$files = explode(',',$this->GetOption('files'));
	$dirs = explode(',',$this->GetOption('dirs'));
	$exts = explode(',',$this->GetOption('extensions'));
	$outfile = $this->GetOption('outfile');
	$minfile = $this->GetOption('minfile');

	// generate a min filename from the outfile for conviencne.
	if(!$minfile && $outfile) {
		$minfile = preg_replace(
			'/\.([^\.]+)$/',
			'.min.\1',
			$outfile
		);
	}

	if(!$dir) {
		$this::Message("ERROR: no project file specified.");
		return 1;
	}

	if(!file_exists($dir) && !$this->MakeDirectory($dir)) {
		$this::Message("ERROR: unable to create project directory.");
		return 2;
	}

	if(file_exists($dir) && !is_writable($dir)) {
		$this::Message("ERROR: unable to write in project directory.");
		return 3;
	}

	if(file_exists("{$dir}/{$filename}")) {
		$this::Message("ERROR: project file already exists.");
		return 4;
	}

	$project = new Nether\OneScript\Project;
	$project->SetProjectFile("{$dir}/{$filename}");

	if($outfile) $project->OutputFile = $outfile;
	if($minfile) $project->OutputMinFile = $minfile;
	if(count($files) && $files[0]) $project->Files = $files;
	if(count($dirs) && $dirs[0]) $project->Directories = $dirs;
	if(count($exts) && $exts[0]) $project->Extensions = $exts;

	$this::Message(">> creating project {$filename}...");
	echo $project;

	$this::Message(">> bootstrapping project directory...");
	$project->Bootstrap();

	$this::Message(">> saving project...");
	$project->Save();

	return 0;
});

////////////////////////////////
////////////////////////////////

$cli->SetHandler('update',function(){
	$file = $this->GetInput(2);

	if(is_dir($file))
	$file = trim($file,'\\/') . DIRECTORY_SEPARATOR . 'onescript.json';

	$this::Message(">> opening project {$file}...");
	try { $project = Nether\OneScript\Project::FromFile($file); }
	catch(Exception $e) {
		$this::Message("ERROR: {$e->getMessage()}");
		return $e->getCode()+100;
	}

	$this::Message(">> saving project {$file}...");
	try { $project->Save(); }
	catch(Exception $e) {
		$this::Message("ERROR: {$e->getMessage()}");
		return $e->getCode()+100;
	}

	return 0;
});

////////////////////////////////
////////////////////////////////

exit($cli->Run());
